---
interface Props {
  option: {
    icon: string;
    title: string;
    description: string;
    image: string;
    alt: string;
    link?: string;
    linkText: string;
    available: boolean;
  };
  index: number;
}

const { option, index } = Astro.props;
---

<article
  class={`flex flex-col md:flex-row items-center gap-8 bg-white rounded-2xl shadow-lg p-6 md:p-10 border transition group
          ${option.available ? "hover:shadow-2xl hover:-translate-y-1" : "opacity-70 cursor-not-allowed"}
        `}
  data-aos="fade-up"
  data-aos-delay={index * 200}
>
  <div class="w-full md:w-1/2">
    <img src={option.image} alt={option.alt} class="rounded-xl w-full h-auto shadow-md object-contain" loading="lazy" />
  </div>

  <div class="w-full md:w-1/2 text-center md:text-left flex flex-col justify-center">
    <div class="mb-4 flex justify-center md:justify-start" set:html={option.icon}></div>
    <h2 class="text-2xl md:text-3xl font-semibold mb-3 text-gray-900">{option.title}</h2>
    <p class="text-gray-600 mb-6 text-lg">{option.description}</p>

    {
      option.available ? (
        <a
          href={option.link}
          class="inline-block bg-primary hover:bg-secondary text-white font-bold px-6 py-3 rounded-full transition-colors text-lg shadow-md focus:outline-none focus:ring-4 focus:ring-primary/50"
        >
          {option.linkText}
        </a>
      ) : (
        <span class="inline-block bg-gray-300 text-gray-600 px-6 py-3 rounded-full font-semibold text-lg shadow cursor-not-allowed">
          {option.linkText}
        </span>
      )
    }
  </div>
</article>
